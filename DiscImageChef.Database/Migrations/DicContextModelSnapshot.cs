// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace DiscImageChef.Database.Migrations
{
    [DbContext(typeof(DicContext))]
    class DicContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
            #pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "2.1.1-rtm-30846");

            modelBuilder.Entity("EFTest.Models.ATA", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<byte?>("APIOSupported");

                b.Property<ushort?>("ATAPIByteCount");

                b.Property<string>("AdditionalPID");

                b.Property<ushort?>("BufferSize");

                b.Property<ushort?>("BufferType");

                b.Property<ushort?>("CFAPowerMode");

                b.Property<ushort?>("Capabilities");

                b.Property<ushort?>("Capabilities2");

                b.Property<byte?>("Capabilities3");

                b.Property<ushort?>("CommandSet");

                b.Property<ushort?>("CommandSet2");

                b.Property<ushort?>("CommandSet3");

                b.Property<ushort?>("CommandSet4");

                b.Property<ushort?>("CommandSet5");

                b.Property<byte?>("CurrentAAM");

                b.Property<ushort?>("CurrentAPM");

                b.Property<byte?>("DMAActive");

                b.Property<byte?>("DMASupported");

                b.Property<byte?>("DMATransferTimingMode");

                b.Property<ushort?>("DataSetMgmt");

                b.Property<ushort?>("DataSetMgmtSize");

                b.Property<ushort?>("DeviceFormFactor");

                b.Property<ushort?>("EnabledCommandSet");

                b.Property<ushort?>("EnabledCommandSet2");

                b.Property<ushort?>("EnabledCommandSet3");

                b.Property<ushort?>("EnabledCommandSet4");

                b.Property<ushort?>("EnabledSATAFeatures");

                b.Property<ushort?>("EnhancedSecurityEraseTime");

                b.Property<ulong?>("ExtendedUserSectors");

                b.Property<string>("FirmwareRevision");

                b.Property<byte?>("FreeFallSensitivity");

                b.Property<ushort?>("GeneralConfiguration");

                b.Property<ushort?>("HardwareResetResult");

                b.Property<byte[]>("Identify");

                b.Property<ushort?>("InterseekDelay");

                b.Property<byte?>("MDMAActive");

                b.Property<byte?>("MDMASupported");

                b.Property<ushort?>("MajorVersion");

                b.Property<ushort?>("MasterPasswordRevisionCode");

                b.Property<ushort?>("MaxDownloadMicroMode3");

                b.Property<ushort?>("MaxQueueDepth");

                b.Property<ushort?>("MinDownloadMicroMode3");

                b.Property<ushort?>("MinMDMACycleTime");

                b.Property<ushort?>("MinPIOCycleTimeFlow");

                b.Property<ushort?>("MinPIOCycleTimeNoFlow");

                b.Property<ushort?>("MinorVersion");

                b.Property<string>("Model");

                b.Property<byte?>("MultipleMaxSectors");

                b.Property<byte?>("MultipleSectorNumber");

                b.Property<ushort?>("NVCacheCaps");

                b.Property<uint?>("NVCacheSize");

                b.Property<ushort?>("NVCacheWriteSpeed");

                b.Property<byte?>("NVEstimatedSpinUp");

                b.Property<byte?>("PIOTransferTimingMode");

                b.Property<ushort?>("PacketBusRelease");

                b.Property<ulong?>("ReadCapabilitiesId");

                b.Property<byte?>("RecommendedAAM");

                b.Property<ushort?>("RecommendedMDMACycleTime");

                b.Property<ushort?>("RemovableStatusSet");

                b.Property<ushort?>("SATACapabilities");

                b.Property<ushort?>("SATACapabilities2");

                b.Property<ushort?>("SATAFeatures");

                b.Property<ushort?>("SCTCommandTransport");

                b.Property<uint?>("SectorsPerCard");

                b.Property<ushort?>("SecurityEraseTime");

                b.Property<ushort?>("SecurityStatus");

                b.Property<ushort?>("ServiceBusyClear");

                b.Property<ushort?>("SpecificConfiguration");

                b.Property<ushort?>("StreamAccessLatency");

                b.Property<ushort?>("StreamMinReqSize");

                b.Property<uint?>("StreamPerformanceGranularity");

                b.Property<ushort?>("StreamTransferTimeDMA");

                b.Property<ushort?>("StreamTransferTimePIO");

                b.Property<ushort?>("TransportMajorVersion");

                b.Property<ushort?>("TransportMinorVersion");

                b.Property<ushort?>("TrustedComputing");

                b.Property<byte?>("UDMAActive");

                b.Property<byte?>("UDMASupported");

                b.Property<byte?>("WRVMode");

                b.Property<uint?>("WRVSectorCountMode2");

                b.Property<uint?>("WRVSectorCountMode3");

                b.HasKey("Id");

                b.HasIndex("ReadCapabilitiesId");

                b.ToTable("ATA");
            });

            modelBuilder.Entity("EFTest.Models.CHS", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<ushort>("Cylinders");

                b.Property<ushort>("Heads");

                b.Property<ushort>("Sectors");

                b.HasKey("Id");

                b.ToTable("CHS");
            });

            modelBuilder.Entity("EFTest.Models.Device", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<ulong?>("ATAId");

                b.Property<ulong?>("ATAPIId");

                b.Property<ulong?>("FireWireId");

                b.Property<bool>("IsValid");

                b.Property<string>("Manufacturer");

                b.Property<string>("Model");

                b.Property<ulong?>("MultiMediaCardId");

                b.Property<ulong?>("PCMCIAId");

                b.Property<string>("Revision");

                b.Property<ulong?>("SCSIId");

                b.Property<ulong?>("SecureDigitalId");

                b.Property<ulong>("TimesSeen");

                b.Property<int>("Type");

                b.Property<ulong?>("USBId");

                b.Property<DateTime>("WhenAdded");

                b.Property<DateTime?>("WhenModified");

                b.HasKey("Id");

                b.HasIndex("ATAId");

                b.HasIndex("ATAPIId");

                b.HasIndex("FireWireId");

                b.HasIndex("MultiMediaCardId");

                b.HasIndex("PCMCIAId");

                b.HasIndex("SCSIId");

                b.HasIndex("SecureDigitalId");

                b.HasIndex("USBId");

                b.ToTable("Device");
            });

            modelBuilder.Entity("EFTest.Models.FireWire", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<string>("Manufacturer");

                b.Property<string>("Product");

                b.Property<uint>("ProductID");

                b.Property<bool>("RemovableMedia");

                b.Property<uint>("VendorID");

                b.HasKey("Id");

                b.ToTable("FireWire");
            });

            modelBuilder.Entity("EFTest.Models.IntClass", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<ulong?>("SupportedMediaId");

                b.Property<int>("Value");

                b.HasKey("Id");

                b.HasIndex("SupportedMediaId");

                b.ToTable("IntClass");
            });

            modelBuilder.Entity("EFTest.Models.PCMCIA", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<byte[]>("CIS");

                b.Property<ushort>("CardCode");

                b.Property<string>("Compliance");

                b.Property<string>("Manufacturer");

                b.Property<ushort>("ManufacturerCode");

                b.Property<string>("ProductName");

                b.HasKey("Id");

                b.ToTable("PCMCIA");
            });

            modelBuilder.Entity("EFTest.Models.SCSI.BlockDescriptor", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<uint?>("BlockLength");

                b.Property<ulong?>("Blocks");

                b.Property<byte>("Density");

                b.Property<ulong?>("ModeId");

                b.HasKey("Id");

                b.HasIndex("ModeId");

                b.ToTable("BlockDescriptor");
            });

            modelBuilder.Entity("EFTest.Models.SCSI.Inquiry", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<bool>("ACKRequests");

                b.Property<bool>("AERCSupported");

                b.Property<byte?>("ANSIVersion");

                b.Property<bool>("AccessControlCoordinator");

                b.Property<bool>("Address16");

                b.Property<bool>("Address32");

                b.Property<byte>("AsymmetricalLUNAccess");

                b.Property<bool>("BasicQueueing");

                b.Property<byte[]>("Data");

                b.Property<byte?>("DeviceTypeModifier");

                b.Property<byte?>("ECMAVersion");

                b.Property<bool>("EnclosureServices");

                b.Property<bool>("HierarchicalLUN");

                b.Property<byte?>("ISOVersion");

                b.Property<bool>("IUS");

                b.Property<bool>("LinkedCommands");

                b.Property<bool>("MediumChanger");

                b.Property<bool>("MultiPortDevice");

                b.Property<bool>("NormalACA");

                b.Property<byte>("PeripheralDeviceType");

                b.Property<byte>("PeripheralQualifier");

                b.Property<string>("ProductIdentification");

                b.Property<string>("ProductRevisionLevel");

                b.Property<bool>("Protection");

                b.Property<bool>("QAS");

                b.Property<bool>("RelativeAddressing");

                b.Property<bool>("Removable");

                b.Property<byte?>("ResponseDataFormat");

                b.Property<byte>("SPIClocking");

                b.Property<bool>("SoftReset");

                b.Property<bool>("StorageArrayController");

                b.Property<bool>("SyncTransfer");

                b.Property<bool>("TaggedCommandQueue");

                b.Property<bool>("TerminateTaskSupported");

                b.Property<bool>("ThirdPartyCopy");

                b.Property<bool>("TranferDisable");

                b.Property<string>("VendorIdentification");

                b.Property<bool>("WideBus16");

                b.Property<bool>("WideBus32");

                b.HasKey("Id");

                b.ToTable("Inquiry");
            });

            modelBuilder.Entity("EFTest.Models.SCSI.MMC.Features", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<byte?>("AACSVersion");

                b.Property<byte?>("AGIDs");

                b.Property<byte?>("BindingNonceBlocks");

                b.Property<ushort?>("BlocksPerReadableUnit");

                b.Property<bool>("BufferUnderrunFreeInDVD");

                b.Property<bool>("BufferUnderrunFreeInSAO");

                b.Property<bool>("BufferUnderrunFreeInTAO");

                b.Property<byte?>("CPRMVersion");

                b.Property<byte?>("CSSVersion");

                b.Property<bool>("CanAudioScan");

                b.Property<bool>("CanEject");

                b.Property<bool>("CanEraseSector");

                b.Property<bool>("CanExpandBDRESpareArea");

                b.Property<bool>("CanFormat");

                b.Property<bool>("CanFormatBDREWithoutSpare");

                b.Property<bool>("CanFormatCert");

                b.Property<bool>("CanFormatFRF");

                b.Property<bool>("CanFormatQCert");

                b.Property<bool>("CanFormatRRM");

                b.Property<bool>("CanGenerateBindingNonce");

                b.Property<bool>("CanLoad");

                b.Property<bool>("CanMuteSeparateChannels");

                b.Property<bool>("CanOverwriteSAOTrack");

                b.Property<bool>("CanOverwriteTAOTrack");

                b.Property<bool>("CanPlayCDAudio");

                b.Property<bool>("CanPseudoOverwriteBDR");

                b.Property<bool>("CanReadAllDualR");

                b.Property<bool>("CanReadAllDualRW");

                b.Property<bool>("CanReadBD");

                b.Property<bool>("CanReadBDR");

                b.Property<bool>("CanReadBDRE1");

                b.Property<bool>("CanReadBDRE2");

                b.Property<bool>("CanReadBDROM");

                b.Property<bool>("CanReadBluBCA");

                b.Property<bool>("CanReadCD");

                b.Property<bool>("CanReadCDMRW");

                b.Property<bool>("CanReadCPRM_MKB");

                b.Property<bool>("CanReadDDCD");

                b.Property<bool>("CanReadDVD");

                b.Property<bool>("CanReadDVDPlusMRW");

                b.Property<bool>("CanReadDVDPlusR");

                b.Property<bool>("CanReadDVDPlusRDL");

                b.Property<bool>("CanReadDVDPlusRW");

                b.Property<bool>("CanReadDVDPlusRWDL");

                b.Property<bool>("CanReadDriveAACSCertificate");

                b.Property<bool>("CanReadHDDVD");

                b.Property<bool>("CanReadHDDVDR");

                b.Property<bool>("CanReadHDDVDRAM");

                b.Property<bool>("CanReadLeadInCDText");

                b.Property<bool>("CanReadOldBDR");

                b.Property<bool>("CanReadOldBDRE");

                b.Property<bool>("CanReadOldBDROM");

                b.Property<bool>("CanReadSpareAreaInformation");

                b.Property<bool>("CanReportDriveSerial");

                b.Property<bool>("CanReportMediaSerial");

                b.Property<bool>("CanTestWriteDDCDR");

                b.Property<bool>("CanTestWriteDVD");

                b.Property<bool>("CanTestWriteInSAO");

                b.Property<bool>("CanTestWriteInTAO");

                b.Property<bool>("CanUpgradeFirmware");

                b.Property<bool>("CanWriteBD");

                b.Property<bool>("CanWriteBDR");

                b.Property<bool>("CanWriteBDRE1");

                b.Property<bool>("CanWriteBDRE2");

                b.Property<bool>("CanWriteBusEncryptedBlocks");

                b.Property<bool>("CanWriteCDMRW");

                b.Property<bool>("CanWriteCDRW");

                b.Property<bool>("CanWriteCDRWCAV");

                b.Property<bool>("CanWriteCDSAO");

                b.Property<bool>("CanWriteCDTAO");

                b.Property<bool>("CanWriteCSSManagedDVD");

                b.Property<bool>("CanWriteDDCDR");

                b.Property<bool>("CanWriteDDCDRW");

                b.Property<bool>("CanWriteDVDPlusMRW");

                b.Property<bool>("CanWriteDVDPlusR");

                b.Property<bool>("CanWriteDVDPlusRDL");

                b.Property<bool>("CanWriteDVDPlusRW");

                b.Property<bool>("CanWriteDVDPlusRWDL");

                b.Property<bool>("CanWriteDVDR");

                b.Property<bool>("CanWriteDVDRDL");

                b.Property<bool>("CanWriteDVDRW");

                b.Property<bool>("CanWriteHDDVDR");

                b.Property<bool>("CanWriteHDDVDRAM");

                b.Property<bool>("CanWriteOldBDR");

                b.Property<bool>("CanWriteOldBDRE");

                b.Property<bool>("CanWritePackedSubchannelInTAO");

                b.Property<bool>("CanWriteRWSubchannelInSAO");

                b.Property<bool>("CanWriteRWSubchannelInTAO");

                b.Property<bool>("CanWriteRaw");

                b.Property<bool>("CanWriteRawMultiSession");

                b.Property<bool>("CanWriteRawSubchannelInTAO");

                b.Property<bool>("ChangerIsSideChangeCapable");

                b.Property<byte>("ChangerSlots");

                b.Property<bool?>("ChangerSupportsDiscPresent");

                b.Property<bool>("DBML");

                b.Property<bool>("DVDMultiRead");

                b.Property<bool>("EmbeddedChanger");

                b.Property<bool>("ErrorRecoveryPage");

                b.Property<DateTime?>("FirmwareDate");

                b.Property<byte?>("LoadingMechanismType");

                b.Property<bool>("Locked");

                b.Property<uint?>("LogicalBlockSize");

                b.Property<bool>("MultiRead");

                b.Property<uint?>("PhysicalInterfaceStandard");

                b.Property<uint?>("PhysicalInterfaceStandardNumber");

                b.Property<bool>("PreventJumper");

                b.Property<bool>("SupportsAACS");

                b.Property<bool>("SupportsBusEncryption");

                b.Property<bool>("SupportsC2");

                b.Property<bool>("SupportsCPRM");

                b.Property<bool>("SupportsCSS");

                b.Property<bool>("SupportsDAP");

                b.Property<bool>("SupportsDeviceBusyEvent");

                b.Property<bool>("SupportsHybridDiscs");

                b.Property<bool>("SupportsModePage1Ch");

                b.Property<bool>("SupportsOSSC");

                b.Property<bool>("SupportsPWP");

                b.Property<bool>("SupportsSWPP");

                b.Property<bool>("SupportsSecurDisc");

                b.Property<bool>("SupportsSeparateVolume");

                b.Property<bool>("SupportsVCPS");

                b.Property<bool>("SupportsWriteInhibitDCB");

                b.Property<bool>("SupportsWriteProtectPAC");

                b.Property<ushort?>("VolumeLevels");

                b.HasKey("Id");

                b.ToTable("Features");
            });

            modelBuilder.Entity("EFTest.Models.SCSI.MMC.MMC", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<ulong?>("FeaturesId");

                b.Property<ulong?>("ModeSense2AId");

                b.HasKey("Id");

                b.HasIndex("FeaturesId");

                b.HasIndex("ModeSense2AId");

                b.ToTable("MMC");
            });

            modelBuilder.Entity("EFTest.Models.SCSI.MMC.Mode2A", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<bool>("AccurateCDDA");

                b.Property<bool>("BCK");

                b.Property<ushort>("BufferSize");

                b.Property<bool?>("BufferUnderRunProtection");

                b.Property<bool>("CDDACommand");

                b.Property<bool>("CSSandCPPMSupported");

                b.Property<bool>("CanEject");

                b.Property<bool>("CanLockMedia");

                b.Property<bool>("CompositeAudioVideo");

                b.Property<ushort?>("CurrentSpeed");

                b.Property<ushort?>("CurrentWriteSpeed");

                b.Property<ushort?>("CurrentWriteSpeedSelected");

                b.Property<bool>("DeterministicSlotChanger");

                b.Property<bool>("DigitalPort1");

                b.Property<bool>("DigitalPort2");

                b.Property<bool>("LSBF");

                b.Property<bool>("LeadInPW");

                b.Property<byte>("LoadingMechanismType");

                b.Property<bool>("LockStatus");

                b.Property<ushort?>("MaximumSpeed");

                b.Property<ushort?>("MaximumWriteSpeed");

                b.Property<bool>("PlaysAudio");

                b.Property<bool>("PreventJumperStatus");

                b.Property<bool>("RCK");

                b.Property<bool>("ReadsBarcode");

                b.Property<bool>("ReadsBothSides");

                b.Property<bool>("ReadsCDR");

                b.Property<bool>("ReadsCDRW");

                b.Property<bool>("ReadsDVDR");

                b.Property<bool>("ReadsDVDRAM");

                b.Property<bool>("ReadsDVDROM");

                b.Property<bool>("ReadsDeinterlavedSubchannel");

                b.Property<bool>("ReadsISRC");

                b.Property<bool>("ReadsMode2Form1");

                b.Property<bool>("ReadsMode2Form2");

                b.Property<bool>("ReadsPacketCDR");

                b.Property<bool>("ReadsSubchannel");

                b.Property<bool>("ReadsUPC");

                b.Property<bool>("ReturnsC2Pointers");

                b.Property<byte?>("RotationControlSelected");

                b.Property<bool>("SSS");

                b.Property<bool>("SeparateChannelMute");

                b.Property<bool>("SeparateChannelVolume");

                b.Property<ushort?>("SupportedVolumeLevels");

                b.Property<bool>("SupportsMultiSession");

                b.Property<bool>("TestWrite");

                b.Property<bool>("WritesCDR");

                b.Property<bool>("WritesCDRW");

                b.Property<bool>("WritesDVDR");

                b.Property<bool>("WritesDVDRAM");

                b.HasKey("Id");

                b.ToTable("Mode2A");
            });

            modelBuilder.Entity("EFTest.Models.SCSI.MMC.WriteDescriptor", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<ulong?>("Mode2AId");

                b.Property<byte>("RotationControl");

                b.Property<ushort>("WriteSpeed");

                b.HasKey("Id");

                b.HasIndex("Mode2AId");

                b.ToTable("WriteDescriptor");
            });

            modelBuilder.Entity("EFTest.Models.SCSI.Mode", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<bool>("BlankCheckEnabled");

                b.Property<byte?>("BufferedMode");

                b.Property<bool>("DPOandFUA");

                b.Property<byte?>("MediumType");

                b.Property<byte?>("Speed");

                b.Property<bool>("WriteProtected");

                b.HasKey("Id");

                b.ToTable("Mode");
            });

            modelBuilder.Entity("EFTest.Models.SCSI.ModePage", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<ulong?>("ModeId");

                b.Property<byte>("page");

                b.Property<byte>("subpage");

                b.Property<byte[]>("value");

                b.HasKey("Id");

                b.HasIndex("ModeId");

                b.ToTable("ModePage");
            });

            modelBuilder.Entity("EFTest.Models.SCSI.Page", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<ulong?>("SCSIId");

                b.Property<byte>("page");

                b.Property<byte[]>("value");

                b.HasKey("Id");

                b.HasIndex("SCSIId");

                b.ToTable("Page");
            });

            modelBuilder.Entity("EFTest.Models.SCSI.SCSI", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<ulong?>("InquiryId");

                b.Property<byte[]>("ModeSense10Data");

                b.Property<byte[]>("ModeSense6Data");

                b.Property<ulong?>("ModeSenseId");

                b.Property<ulong?>("MultiMediaDeviceId");

                b.Property<ulong?>("ReadCapabilitiesId");

                b.Property<ulong?>("SequentialDeviceId");

                b.Property<bool>("SupportsModeSense10");

                b.Property<bool>("SupportsModeSense6");

                b.Property<bool>("SupportsModeSubpages");

                b.HasKey("Id");

                b.HasIndex("InquiryId");

                b.HasIndex("ModeSenseId");

                b.HasIndex("MultiMediaDeviceId");

                b.HasIndex("ReadCapabilitiesId");

                b.HasIndex("SequentialDeviceId");

                b.ToTable("SCSI");
            });

            modelBuilder.Entity("EFTest.Models.SCSI.SSC.SequentialMedia", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<bool?>("CanReadMediaSerial");

                b.Property<byte?>("Density");

                b.Property<string>("Manufacturer");

                b.Property<bool>("MediaIsRecognized");

                b.Property<byte?>("MediumType");

                b.Property<string>("MediumTypeName");

                b.Property<byte[]>("ModeSense10Data");

                b.Property<byte[]>("ModeSense6Data");

                b.Property<string>("Model");

                b.Property<ulong?>("SSCId");

                b.HasKey("Id");

                b.HasIndex("SSCId");

                b.ToTable("SequentialMedia");
            });

            modelBuilder.Entity("EFTest.Models.SCSI.SSC.SSC", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<byte?>("BlockSizeGranularity");

                b.Property<uint?>("MaxBlockLength");

                b.Property<uint?>("MinBlockLength");

                b.HasKey("Id");

                b.ToTable("SSC");
            });

            modelBuilder.Entity("EFTest.Models.SCSI.SSC.SupportedDensity", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<uint>("BitsPerMm");

                b.Property<uint>("Capacity");

                b.Property<bool>("DefaultDensity");

                b.Property<string>("Description");

                b.Property<bool>("Duplicate");

                b.Property<string>("Name");

                b.Property<string>("Organization");

                b.Property<byte>("PrimaryCode");

                b.Property<ulong?>("SSCId");

                b.Property<byte>("SecondaryCode");

                b.Property<ulong?>("SequentialMediaId");

                b.Property<ushort>("Tracks");

                b.Property<ushort>("Width");

                b.Property<bool>("Writable");

                b.HasKey("Id");

                b.HasIndex("SSCId");

                b.HasIndex("SequentialMediaId");

                b.ToTable("SupportedDensity");
            });

            modelBuilder.Entity("EFTest.Models.SCSI.SupportedMedia", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<string>("Description");

                b.Property<ushort>("Length");

                b.Property<byte>("MediumType");

                b.Property<string>("Name");

                b.Property<string>("Organization");

                b.Property<ulong?>("SSCId");

                b.Property<ulong?>("SequentialMediaId");

                b.Property<ushort>("Width");

                b.HasKey("Id");

                b.HasIndex("SSCId");

                b.HasIndex("SequentialMediaId");

                b.ToTable("SupportedMedia");
            });

            modelBuilder.Entity("EFTest.Models.SecureDigital", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<byte[]>("CID");

                b.Property<byte[]>("CSD");

                b.Property<byte[]>("ExtendedCSD");

                b.Property<byte[]>("OCR");

                b.Property<byte[]>("SCR");

                b.HasKey("Id");

                b.ToTable("SecureDigital");
            });

            modelBuilder.Entity("EFTest.Models.StringClass", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<ulong?>("PCMCIAId");

                b.Property<string>("Value").IsRequired();

                b.HasKey("Id");

                b.HasIndex("PCMCIAId");

                b.ToTable("StringClass");
            });

            modelBuilder.Entity("EFTest.Models.TestedMedia", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<ulong?>("ATAId");

                b.Property<uint?>("BlockSize");

                b.Property<ulong?>("Blocks");

                b.Property<ulong?>("CHSId");

                b.Property<bool?>("CanReadAACS");

                b.Property<bool?>("CanReadADIP");

                b.Property<bool?>("CanReadATIP");

                b.Property<bool?>("CanReadBCA");

                b.Property<bool?>("CanReadC2Pointers");

                b.Property<bool?>("CanReadCMI");

                b.Property<bool?>("CanReadCorrectedSubchannel");

                b.Property<bool?>("CanReadCorrectedSubchannelWithC2");

                b.Property<bool?>("CanReadDCB");

                b.Property<bool?>("CanReadDDS");

                b.Property<bool?>("CanReadDMI");

                b.Property<bool?>("CanReadDiscInformation");

                b.Property<bool?>("CanReadFullTOC");

                b.Property<bool?>("CanReadHDCMI");

                b.Property<bool?>("CanReadLayerCapacity");

                b.Property<bool?>("CanReadLeadIn");

                b.Property<bool?>("CanReadLeadInPostgap");

                b.Property<bool?>("CanReadLeadOut");

                b.Property<bool?>("CanReadMediaID");

                b.Property<bool?>("CanReadMediaSerial");

                b.Property<bool?>("CanReadPAC");

                b.Property<bool?>("CanReadPFI");

                b.Property<bool?>("CanReadPMA");

                b.Property<bool?>("CanReadPQSubchannel");

                b.Property<bool?>("CanReadPQSubchannelWithC2");

                b.Property<bool?>("CanReadPRI");

                b.Property<bool?>("CanReadRWSubchannel");

                b.Property<bool?>("CanReadRWSubchannelWithC2");

                b.Property<bool?>("CanReadRecordablePFI");

                b.Property<bool?>("CanReadSpareAreaInformation");

                b.Property<bool?>("CanReadTOC");

                b.Property<ulong?>("CurrentCHSId");

                b.Property<byte?>("Density");

                b.Property<ulong?>("LBA48Sectors");

                b.Property<uint?>("LBASectors");

                b.Property<ushort?>("LogicalAlignment");

                b.Property<uint?>("LongBlockSize");

                b.Property<ulong?>("MMCId");

                b.Property<string>("Manufacturer");

                b.Property<bool>("MediaIsRecognized");

                b.Property<byte?>("MediumType");

                b.Property<string>("MediumTypeName");

                b.Property<byte[]>("ModeSense10Data");

                b.Property<byte[]>("ModeSense6Data");

                b.Property<string>("Model");

                b.Property<ushort?>("NominalRotationRate");

                b.Property<uint?>("PhysicalBlockSize");

                b.Property<ulong?>("SCSIId");

                b.Property<bool?>("SolidStateDevice");

                b.Property<bool?>("SupportsHLDTSTReadRawDVD");

                b.Property<bool?>("SupportsNECReadCDDA");

                b.Property<bool?>("SupportsPioneerReadCDDA");

                b.Property<bool?>("SupportsPioneerReadCDDAMSF");

                b.Property<bool?>("SupportsPlextorReadCDDA");

                b.Property<bool?>("SupportsPlextorReadRawDVD");

                b.Property<bool?>("SupportsRead");

                b.Property<bool?>("SupportsRead10");

                b.Property<bool?>("SupportsRead12");

                b.Property<bool?>("SupportsRead16");

                b.Property<bool?>("SupportsReadCapacity");

                b.Property<bool?>("SupportsReadCapacity16");

                b.Property<bool?>("SupportsReadCd");

                b.Property<bool?>("SupportsReadCdMsf");

                b.Property<bool?>("SupportsReadCdMsfRaw");

                b.Property<bool?>("SupportsReadCdRaw");

                b.Property<bool?>("SupportsReadDma");

                b.Property<bool?>("SupportsReadDmaLba");

                b.Property<bool?>("SupportsReadDmaLba48");

                b.Property<bool?>("SupportsReadDmaRetry");

                b.Property<bool?>("SupportsReadDmaRetryLba");

                b.Property<bool?>("SupportsReadLba");

                b.Property<bool?>("SupportsReadLba48");

                b.Property<bool?>("SupportsReadLong");

                b.Property<bool?>("SupportsReadLong16");

                b.Property<bool?>("SupportsReadLongLba");

                b.Property<bool?>("SupportsReadLongRetry");

                b.Property<bool?>("SupportsReadLongRetryLba");

                b.Property<bool?>("SupportsReadRetry");

                b.Property<bool?>("SupportsReadRetryLba");

                b.Property<bool?>("SupportsSeek");

                b.Property<bool?>("SupportsSeekLba");

                b.Property<ushort?>("UnformattedBPS");

                b.Property<ushort?>("UnformattedBPT");

                b.HasKey("Id");

                b.HasIndex("ATAId");

                b.HasIndex("CHSId");

                b.HasIndex("CurrentCHSId");

                b.HasIndex("MMCId");

                b.HasIndex("SCSIId");

                b.ToTable("TestedMedia");
            });

            modelBuilder.Entity("EFTest.Models.USB", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<byte[]>("Descriptors");

                b.Property<string>("Manufacturer");

                b.Property<string>("Product");

                b.Property<ushort>("ProductID");

                b.Property<bool>("RemovableMedia");

                b.Property<ushort>("VendorID");

                b.HasKey("Id");

                b.ToTable("USB");
            });

            modelBuilder.Entity("EFTest.Models.UshortClass", b =>
            {
                b.Property<ulong>("Id").ValueGeneratedOnAdd();

                b.Property<ulong?>("InquiryId");

                b.Property<ushort>("Value");

                b.HasKey("Id");

                b.HasIndex("InquiryId");

                b.ToTable("UshortClass");
            });

            modelBuilder.Entity("EFTest.Models.ATA",
                                b =>
                                {
                                    b.HasOne("EFTest.Models.TestedMedia", "ReadCapabilities").WithMany()
                                     .HasForeignKey("ReadCapabilitiesId");
                                });

            modelBuilder.Entity("EFTest.Models.Device", b =>
            {
                b.HasOne("EFTest.Models.ATA", "ATA").WithMany().HasForeignKey("ATAId");

                b.HasOne("EFTest.Models.ATA", "ATAPI").WithMany().HasForeignKey("ATAPIId");

                b.HasOne("EFTest.Models.FireWire", "FireWire").WithMany().HasForeignKey("FireWireId");

                b.HasOne("EFTest.Models.SecureDigital", "MultiMediaCard").WithMany().HasForeignKey("MultiMediaCardId");

                b.HasOne("EFTest.Models.PCMCIA", "PCMCIA").WithMany().HasForeignKey("PCMCIAId");

                b.HasOne("EFTest.Models.SCSI.SCSI", "SCSI").WithMany().HasForeignKey("SCSIId");

                b.HasOne("EFTest.Models.SecureDigital", "SecureDigital").WithMany().HasForeignKey("SecureDigitalId");

                b.HasOne("EFTest.Models.USB", "USB").WithMany().HasForeignKey("USBId");
            });

            modelBuilder.Entity("EFTest.Models.IntClass",
                                b =>
                                {
                                    b.HasOne("EFTest.Models.SCSI.SupportedMedia").WithMany("DensityCodes")
                                     .HasForeignKey("SupportedMediaId");
                                });

            modelBuilder.Entity("EFTest.Models.SCSI.BlockDescriptor",
                                b =>
                                {
                                    b.HasOne("EFTest.Models.SCSI.Mode").WithMany("BlockDescriptors")
                                     .HasForeignKey("ModeId");
                                });

            modelBuilder.Entity("EFTest.Models.SCSI.MMC.MMC", b =>
            {
                b.HasOne("EFTest.Models.SCSI.MMC.Features", "Features").WithMany().HasForeignKey("FeaturesId");

                b.HasOne("EFTest.Models.SCSI.MMC.Mode2A", "ModeSense2A").WithMany().HasForeignKey("ModeSense2AId");
            });

            modelBuilder.Entity("EFTest.Models.SCSI.MMC.WriteDescriptor",
                                b =>
                                {
                                    b.HasOne("EFTest.Models.SCSI.MMC.Mode2A")
                                     .WithMany("WriteSpeedPerformanceDescriptors").HasForeignKey("Mode2AId");
                                });

            modelBuilder.Entity("EFTest.Models.SCSI.ModePage",
                                b =>
                                {
                                    b.HasOne("EFTest.Models.SCSI.Mode").WithMany("ModePages").HasForeignKey("ModeId");
                                });

            modelBuilder.Entity("EFTest.Models.SCSI.Page",
                                b =>
                                {
                                    b.HasOne("EFTest.Models.SCSI.SCSI").WithMany("EVPDPages").HasForeignKey("SCSIId");
                                });

            modelBuilder.Entity("EFTest.Models.SCSI.SCSI", b =>
            {
                b.HasOne("EFTest.Models.SCSI.Inquiry", "Inquiry").WithMany().HasForeignKey("InquiryId");

                b.HasOne("EFTest.Models.SCSI.Mode", "ModeSense").WithMany().HasForeignKey("ModeSenseId");

                b.HasOne("EFTest.Models.SCSI.MMC.MMC", "MultiMediaDevice").WithMany()
                 .HasForeignKey("MultiMediaDeviceId");

                b.HasOne("EFTest.Models.TestedMedia", "ReadCapabilities").WithMany()
                 .HasForeignKey("ReadCapabilitiesId");

                b.HasOne("EFTest.Models.SCSI.SSC.SSC", "SequentialDevice").WithMany()
                 .HasForeignKey("SequentialDeviceId");
            });

            modelBuilder.Entity("EFTest.Models.SCSI.SSC.SequentialMedia",
                                b =>
                                {
                                    b.HasOne("EFTest.Models.SCSI.SSC.SSC").WithMany("TestedMedia")
                                     .HasForeignKey("SSCId");
                                });

            modelBuilder.Entity("EFTest.Models.SCSI.SSC.SupportedDensity", b =>
            {
                b.HasOne("EFTest.Models.SCSI.SSC.SSC").WithMany("SupportedDensities").HasForeignKey("SSCId");

                b.HasOne("EFTest.Models.SCSI.SSC.SequentialMedia").WithMany("SupportedDensities")
                 .HasForeignKey("SequentialMediaId");
            });

            modelBuilder.Entity("EFTest.Models.SCSI.SupportedMedia", b =>
            {
                b.HasOne("EFTest.Models.SCSI.SSC.SSC").WithMany("SupportedMediaTypes").HasForeignKey("SSCId");

                b.HasOne("EFTest.Models.SCSI.SSC.SequentialMedia").WithMany("SupportedMediaTypes")
                 .HasForeignKey("SequentialMediaId");
            });

            modelBuilder.Entity("EFTest.Models.StringClass",
                                b =>
                                {
                                    b.HasOne("EFTest.Models.PCMCIA").WithMany("AdditionalInformation")
                                     .HasForeignKey("PCMCIAId");
                                });

            modelBuilder.Entity("EFTest.Models.TestedMedia", b =>
            {
                b.HasOne("EFTest.Models.ATA").WithMany("RemovableMedias").HasForeignKey("ATAId");

                b.HasOne("EFTest.Models.CHS", "CHS").WithMany().HasForeignKey("CHSId");

                b.HasOne("EFTest.Models.CHS", "CurrentCHS").WithMany().HasForeignKey("CurrentCHSId");

                b.HasOne("EFTest.Models.SCSI.MMC.MMC").WithMany("TestedMedia").HasForeignKey("MMCId");

                b.HasOne("EFTest.Models.SCSI.SCSI").WithMany("RemovableMedias").HasForeignKey("SCSIId");
            });

            modelBuilder.Entity("EFTest.Models.UshortClass",
                                b =>
                                {
                                    b.HasOne("EFTest.Models.SCSI.Inquiry").WithMany("VersionDescriptors")
                                     .HasForeignKey("InquiryId");
                                });
            #pragma warning restore 612, 618
        }
    }
}